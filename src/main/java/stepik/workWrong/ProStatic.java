package stepik.workWrong;

public final class ProStatic {
    private final ProFinal proFinal = new ProFinal();
    static {

    }
    public static void main(String[] args) {
    Math.abs(50);

        double pi = Math.PI;

//         В отличие от локальных переменных,
//                статические поля и методы НЕ
//        потокобезопасны (Thread-safe)
//        в Java. На практике это одна
//        из наиболее частых причин
//        возникновения проблем связанных
//        с безопасностью мультипоточного
//        программирования. Учитывая что каждый
//        экземпляр класса имеет одну и ту же копию
//        статической переменной, то такая переменная
//        нуждается в защите — «залочивании» классом.
//                Поэтому при использовании статических
//        переменных, убедитесь, что они должным образом
//        синхронизированы (synchronized), во избежание проблем,
//                например таких как «состояние гонки» (race condition).

//         Статические методы имеют преимущество в применении, т.к.
//                отсутствует необходимость каждый раз создавать новый
//        объект для доступа к таким методам. Статический метод можно вызвать,
//        используя тип класса, в котором эти методы описаны. Именно поэтому,
//        подобные методы как нельзя лучше подходят в качестве методов-фабрик
//                (factory), и методов-утилит (utility). Класс java.lang.Math —
//        замечательный пример, в котором почти все методы статичны,
//                по этой же причине классы-утилиты в Java финализированы (final).


    }
}
